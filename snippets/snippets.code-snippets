{
  // Java basic template
  "Java Template": {
    "prefix": "java",
    "body": [
      "import java.util.*;",

      "public class ${TM_FILENAME_BASE} {",
      "    public static void main(String[] args) {",
      "        $0",
      "    }",
      "}",
    ],
    "description": "Creates a basic Java class with the main method."
  },
  // Java class template
  "Java Class Template": {
    "prefix": "jclass",
    "body": [
      "public class ${TM_FILENAME_BASE} {",
      "    $0",
      "}",
    ],
    "description": "Creates a basic Java class."
  },
  // Java class with main method
  "Java Class with Main Method": {
    "prefix": "jmain",
    "body": [
      "public static void main(String[] args) {",
      "    $0",
      "}",
    ],
    "description": "Creates a basic Java class with the main method."
  },

  /*----------------------------------------------------------------------------------------------------*/
  /*----------------------------------------------------------------------------------------------------*/
  /*----------------------------------------------------------------------------------------------------*/

  // Java Scanner template
  "Java Scanner Template": {
    "prefix": "jscan",
    "body": [
      "Scanner scanner = new Scanner(System.in);",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input."
  },
  // Java Scanner integer
  "Java Scanner Integer": {
    "prefix": "jscanint",
    "body": [
      "int ${1:variable} = scanner.nextInt();",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input Integer."
  },
  // Java Scanner String
  "Java Scanner String": {
    "prefix": "jscanstr",
    "body": [
      "String ${1:variable} = scanner.nextLine();",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input String."
  },
  // Java Scanner double
  "Java Scanner Double": {
    "prefix": "jscandouble",
    "body": [
      "double ${1:variable} = scanner.nextDouble();",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input Double."
  },
  // Java Scanner long
  "Java Scanner Long": {
    "prefix": "jscanlong",
    "body": [
      "long ${1:variable} = scanner.nextLong();",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input Long."
  },
  // Java Scanner float
  "Java Scanner Float": {
    "prefix": "jscanfloat",
    "body": [
      "float ${1:variable} = scanner.nextFloat();",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input Float."
  },
  // Java Scanner boolean
  "Java Scanner Boolean": {
    "prefix": "jscanbool",
    "body": [
      "boolean ${1:variable} = scanner.nextBoolean();",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input Boolean."
  },
  // Java Scanner byte
  "Java Scanner Byte": {
    "prefix": "jscanbyte",
    "body": [
      "byte ${1:variable} = scanner.nextByte();",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input Byte."
  },
  // Java Scanner short
  "Java Scanner Short": {
    "prefix": "jscanshort",
    "body": [
      "short ${1:variable} = scanner.nextShort();",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input Short."
  },
  // Java Scanner char
  "Java Scanner Char": {
    "prefix": "jscanchr",
    "body": [
      "char ${1:variable} = scanner.next().charAt(0);",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input Char."
  },
  // Java Scanner BigInteger
  "Java Scanner BigInteger": {
    "prefix": "jscanbiginteger",
    "body": [
      "BigInteger ${1:variable} = scanner.nextBigInteger();",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input BigInteger."
  },
  // Java Scanner BigDecimal
  "Java Scanner BigDecimal": {
    "prefix": "jscanbigdecimal",
    "body": [
      "BigDecimal ${1:variable} = scanner.nextBigDecimal();",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input BigDecimal."
  },
  // Java Scanner nextLine
  "Java Scanner nextLine": {
    "prefix": "jscannextline",
    "body": [
      "scanner.nextLine();",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input nextLine."
  },
  // Java Scanner Integer Array
  "Java Scanner Integer Array using for loop": {
    "prefix": "jscanintarray",
    "body": [
      "Scanner scanner = new Scanner(System.in);",
      "int[] ${1:arr} = new int[scanner.nextInt()];",
      "",
      "for (int i = 0; i < ${1:arr}.length; i++) {",
      "    ${1:arr}[i] = scanner.nextInt();",
      "}",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input Integer Array"
  },
  // Java Scanner String Array
  "Java Scanner String Array": {
    "prefix": "jscanstrarray",
    "body": [
      "Scanner scanner = new Scanner(System.in);",
      "int n = scanner.nextInt();",
      "scanner.nextLine(); // Consume the newline character",
      "",
      "String[] ${1:arr} = new String[n];",
      "for (int i = 0; i < ${1:arr}.length; i++) {",
      "    ${1:arr}[i] = scanner.nextLine();",
      "}",
      "$0"
    ],
    "description": "Creates a Java class with a Scanner object for user input String Array"
  },
  
  // java Scanner Integer ArrayList
  "Java Scanner Integer ArrayList": {
    "prefix": "jscanintarraylist",
    "body": [
      "Scanner scanner = new Scanner(System.in);",
      "int n = scanner.nextInt();",
      "",
      "ArrayList<Integer> ${1:list} = new ArrayList<>();",
      "for (int i = 0; i < n; i++) {",
      "    ${1:list}.add(scanner.nextInt());",
      "}",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input Integer ArrayList"
  },
  // java Scanner String ArrayList
  "Java Scanner String ArrayList": {
    "prefix": "jscanstrarraylist",
    "body": [
      "Scanner scanner = new Scanner(System.in);",
      "int n = scanner.nextInt();",
      "scanner.nextLine(); // Consume the newline character",
      "",
      "ArrayList<String> ${1:list} = new ArrayList<>();",
      "for (int i = 0; i < n; i++) {",
      "    ${1:list}.add(scanner.nextLine());",
      "}",
      "$0",
    ],
    "description": "Creates a Java class with a Scanner object for user input String ArrayList"
  },
  // Java Scanner Integer LinkedList
  "Java Scanner Integer LinkedList": {
  "prefix": "jscanintlinkedlist",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "",
    "LinkedList<Integer> ${1:list} = new LinkedList<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:list}.add(scanner.nextInt());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input Integer LinkedList"
 },
 // Java Scanner String LinkedList
 "Java Scanner String LinkedList": {
  "prefix": "jscanstrlinkedlist",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "scanner.nextLine(); // Consume the newline character",
    "",
    "LinkedList<String> ${1:list} = new LinkedList<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:list}.add(scanner.nextLine());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input String LinkedList"
 },
 
 // Java Scanner Integer Queue
 "Java Scanner Integer Queue": {
  "prefix": "jscanintqueue",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "",
    "Queue<Integer> ${1:queue} = new LinkedList<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:queue}.offer(scanner.nextInt());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input Integer Queue"
 },
 
 // Java Scanner String Queue
 "Java Scanner String Queue": {
  "prefix": "jscanstrqueue",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "scanner.nextLine(); // Consume the newline character",
    "",
    "Queue<String> ${1:queue} = new LinkedList<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:queue}.offer(scanner.nextLine());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input String Queue"
 },
 
 // Java Scanner Integer Stack
 "Java Scanner Integer Stack": {
  "prefix": "jscanintstack",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "",
    "Stack<Integer> ${1:stack} = new Stack<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:stack}.push(scanner.nextInt());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input Integer Stack"
 },
 
 // Java Scanner String Stack
 "Java Scanner String Stack": {
  "prefix": "jscanstrstack",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "scanner.nextLine(); // Consume the newline character",
    "",
    "Stack<String> ${1:stack} = new Stack<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:stack}.push(scanner.nextLine());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input String Stack"
 },

 // Java Scanner Integer Set
 "Java Scanner Integer Set": {
  "prefix": "jscanintset",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "",
    "Set<Integer> ${1:set} = new HashSet<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:set}.add(scanner.nextInt());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input Integer Set"
 },

 // Java Scanner String Set
 "Java Scanner String Set": {
  "prefix": "jscanstrset",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "scanner.nextLine(); // Consume the newline character",
    "",
    "Set<String> ${1:set} = new HashSet<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:set}.add(scanner.nextLine());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input String Set"
 },

 // Java Scanner Integer TreeMap
 "Java Scanner Integer TreeMap": {
  "prefix": "jscaninttreemap",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "",
    "Map<Integer, Integer> ${1:map} = new TreeMap<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:map}.put(scanner.nextInt(), scanner.nextInt());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input Integer TreeMap"
 },

 // Java Scanner String TreeMap
 "Java Scanner String TreeMap": {
  "prefix": "jscanstrtreemap",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "scanner.nextLine(); // Consume the newline character",
    "",
    "Map<String, Integer> ${1:map} = new TreeMap<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:map}.put(scanner.nextLine(), scanner.nextInt());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input String TreeMap"
 },

 // Java Scanner Integer PriorityQueue
 "Java Scanner Integer PriorityQueue": {
  "prefix": "jscanintpriorityqueue",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "",
    "PriorityQueue<Integer> ${1:pqueue} = new PriorityQueue<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:pqueue}.offer(scanner.nextInt());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input Integer PriorityQueue"
 },

 // Java Scanner String PriorityQueue
 "Java Scanner String PriorityQueue": {
  "prefix": "jscanstrpriorityqueue",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "scanner.nextLine(); // Consume the newline character",
    "",
    "PriorityQueue<String> ${1:pqueue} = new PriorityQueue<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:pqueue}.offer(scanner.nextLine());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input String PriorityQueue"
 },

 // Java Scanner Integer HashSet
 "Java Scanner Integer HashSet": {
  "prefix": "jscaninthashset",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "",
    "Set<Integer> ${1:set} = new HashSet<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:set}.add(scanner.nextInt());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input Integer HashSet"
 },

 // Java Scanner String HashSet
 "Java Scanner String HashSet": {
  "prefix": "jscanstrhashset",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "scanner.nextLine(); // Consume the newline character",
    "",
    "Set<String> ${1:set} = new HashSet<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:set}.add(scanner.nextLine());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input String HashSet"
 },

 // Java Scanner Integer TreeSet
 "Java Scanner Integer TreeSet": {
  "prefix": "jscaninttreeset",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "",
    "Set<Integer> ${1:set} = new TreeSet<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:set}.add(scanner.nextInt());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input Integer TreeSet"
 },

 // Java Scanner String TreeSet
 "Java Scanner String TreeSet": {
  "prefix": "jscanstrtreeset",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "scanner.nextLine(); // Consume the newline character",
    "",
    "Set<String> ${1:set} = new TreeSet<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:set}.add(scanner.nextLine());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input String TreeSet"
 },

 // Java Scanner Integer LinkedHashSet
 "Java Scanner Integer LinkedHashSet": {
  "prefix": "jscanintlinkedhashset",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "",
    "Set<Integer> ${1:set} = new LinkedHashSet<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:set}.add(scanner.nextInt());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input Integer LinkedHashSet"
 },

 // Java Scanner String LinkedHashSet
 "Java Scanner String LinkedHashSet": {
  "prefix": "jscanstrlinkedhashset",
  "body": [
    "Scanner scanner = new Scanner(System.in);",
    "int n = scanner.nextInt();",
    "scanner.nextLine(); // Consume the newline character",
    "",
    "Set<String> ${1:set} = new LinkedHashSet<>();",
    "for (int i = 0; i < n; i++) {",
    "    ${1:set}.add(scanner.nextLine());",
    "}",
    "$0"
  ],
  "description": "Creates a Java class with a Scanner object for user input String LinkedHashSet"
 },
  /*----------------------------------------------------------------------------------------------------*/
  /*----------------------------------------------------------------------------------------------------*/
  /*----------------------------------------------------------------------------------------------------*/

  // Java Output template
  "Java Output Template": {
    "prefix": "jout",
    "body": [
      "System.out.println($0);",
    ],
    "description": "Creates a Java output code"
  },
 // Output Array 
  "Java Array Output": {
    "prefix": "joutarray",
    "body": [
      "for (final var e : arr) {",
      "    System.out.println(e);",
      "}",
      "$0",
    ],
    "description": "Creates a Java output code of Array"
  },

  // Output Arraylist
  "Java ArrayList Output": {
    "prefix": "joutarraylist",
    "body": [
      "for (final var e : list) {",
      "    System.out.println(e);",
      "}",
      "$0",
    ],
    "description": "Creates a Java output code of ArrayList"
  },
  // Output Hashmap
  "Java HashMap Output": {
    "prefix": "jouthashmap",
    "body": [
      "for (Map.Entry<String, Integer> entry : map.entrySet()) {",
      "    System.out.println(entry.getKey() + \" \" + entry.getValue());",
      "}",
      "$0",
    ],
    "description": "Creates a Java output code"
  },
  // Output Linkedlist
  "Java LinkedList Output": {
    "prefix": "joutlinkedlist",
    "body": [
      "for (int i = 0; i < list.size(); i++) {",
      "    System.out.println(list.get(i));",
      "}",
      "$0",
    ],
    "description": "Creates a Java output code"
  },
  // Output Queue
  "Java Queue Output": {
    "prefix": "joutqueue",
    "body": [
      "while (!queue.isEmpty()) {",
      "    int element = queue.poll();",
      "    System.out.println(element);",
      "}",
      "$0",
    ],
    "description": "Creates a Java output code of Queue"
  },
  // Output Stack
  "Java Stack Output": {
    "prefix": "joutstack",
    "body": [
      "while (!stack.isEmpty()) {",
      "    int element = stack.pop();",
      "    System.out.println(element);",
      "}",
      "$0",
    ],
    "description": "Creates a Java output code of Stack"
  },
  // Output Set
  "Java Set Output": {
    "prefix": "joutset",
    "body": [
      "for (int element : set) {",
      "    System.out.println(element);",
      "}",
      "$0",
    ],
    "description": "Creates a Java output code of a Set"
  },
  // Output Treemap
  "Java TreeMap Output": {
    "prefix": "jouttreemap",
    "body": [
      "for (Map.Entry<String, Integer> entry : map.entrySet()) {",
      "    System.out.println(entry.getKey() + \" \" + entry.getValue());",
      "}",
      "$0",
    ],
    "description": "Creates a Java output code of Map"
  },
  // Output Priorityqueue
  "Java PriorityQueue Output": {
    "prefix": "joutpq",
    "body": [
      "while (!pqueue.isEmpty()) {",
      "    int element = pqueue.poll();",
      "    System.out.println(element);",
      "}",
      "$0",
    ],
    "description": "Creates a Java output code of priority queue"
  },
  // Output Hashset
  "Java HashSet Output": {
    "prefix": "jouthashset",
    "body": [
      "for (int element : set) {",
      "    System.out.println(element);",
      "}",
      "$0",
    ],
    "description": "Creates a Java output code of hashSet"
  },
  // Output Treeset
  "Java TreeSet Output": {
    "prefix": "jouttreeset",
    "body": [
      "for (int element : set) {",
      "    System.out.println(element);",
      "}",
      "$0",
    ],
    "description": "Creates a Java output code of TreeSet"
  },
  // Output Linkedhashset
  "Java LinkedHashSet Output": {
    "prefix": "joutlinkedhashset",
    "body": [
      "for (int element : set) {",
      "    System.out.println(element);",
      "}",
      "$0",
    ],
    "description": "Creates a Java output code Of Linked Hash Set"
  },

 /*----------------------------------------------------------------------------------------------------*/
 /*----------------------------------------------------------------------------------------------------*/
 /*----------------------------------------------------------------------------------------------------*/

 // Java ArrayList template for Integer
 "Java ArrayList Template Integer": {
  "prefix": "jarraylistint",
  "body": [
    "ArrayList<Integer> list = new ArrayList<>();",
    "$0",
  ],
  "description": "Creates a Java class with an ArrayList Integer."
 },
 // Java ArrayList template for String
 "Java ArrayList Template String": {
  "prefix": "jarrayliststr",
  "body": [
    "ArrayList<String> list = new ArrayList<>();",
    "$0",
  ],
  "description": "Creates a Java class with an ArrayList String."
 },
  // Java HashMap template Integer
  "Java HashMap Template Integer": {
    "prefix": "jhashmapint",
    "body": [
      "HashMap<Integer, Integer> map = new HashMap<>();",
      "$0"
    ],
    "description": "Creates a Java class with a HashMap."
  },
  // Java HashMap template String
  "Java HashMap Template String": {
    "prefix": "jhashmapstr",
    "body": [
      "HashMap<String, String> map = new HashMap<>();",
      "$0"
    ],
    "description": "Creates a Java class with a HashMap."
  },

  // Java LinkedList template Integer type
  "Java LinkedList Template Integer": {
    "prefix": "jlinkedlistint",
    "body": [
      "LinkedList<Integer> list = new LinkedList<>();",
      "$0",
    ],
    "description": "Creates a Java class with a LinkedList Integer."
  },
  // Java LinkedList template String type
  "Java LinkedList Template String": {
    "prefix": "jlinkedliststr",
    "body": [
      "LinkedList<String> list = new LinkedList<>();",
      "$0",
    ],
    "description": "Creates a Java class with a LinkedList String."
  },
  // Java Doubly linked list template Integer
  "Java Doubly LinkedList Template Integer": {
    "prefix": "jdlinkedlistint",
    "body": [
      "DoublyLinkedList<Integer> list = new DoublyLinkedList<>();",
      "$0",
    ],
    "description": "Creates a Java class with a Doubly LinkedList Integer."
  },
  // Java Doubly linked list template String
  "Java Doubly LinkedList Template String": {
    "prefix": "jdlinkedliststr",
    "body": [
      "DoublyLinkedList<String> list = new DoublyLinkedList<>();",
      "$0",
    ],
    "description": "Creates a Java class with a Doubly LinkedList String."
  },
  // Java Circular linked list template Integer
  "Java Circular LinkedList Template Integer": {
    "prefix": "jclinkedlistint",
    "body": [
      "CircularLinkedList<Integer> list = new CircularLinkedList<>();",
      "$0",
    ],
    "description": "Creates a Java class with a Circular LinkedList Integer."
  },
  // Java Circular linked list template String
  "Java Circular LinkedList Template String": {
    "prefix": "jclinkedliststr",
    "body": [
      "CircularLinkedList<String> list = new CircularLinkedList<>();",
      "$0",
    ],
    "description": "Creates a Java class with a Circular LinkedList String."
  },

  // Java Queue template using a LinkedList Integer
  "Java Queue Template LinkedList Integer": {
    "prefix": "jqueuelinint",
    "body": [
      "Queue<Integer> queue = new LinkedList<>();",
      "$0",
    ],
    "description": "Creates a Java class with a Queue (using LinkedList)."
  },
  // Java Queue template using a LinkedList String
  "Java Queue Template LinkedList String": {
    "prefix": "jqueuelinstr",
    "body": [
      "Queue<String> queue = new LinkedList<>();",
      "$0",
    ],
    "description": "Creates a Java class with a Queue (using LinkedList)."
  },
  // Java Queue template using a PriorityQueue Integer
  "Java Queue Template PriorityQueue Integer": {
    "prefix": "jqueuepqint",
    "body": [
      "Queue<Integer> queue = new PriorityQueue<>();",
      "$0",
    ],
    "description": "Creates a Java class with a Queue (using PriorityQueue) Integer."
  },
  // Java Queue template using a PriorityQueue String
  "Java Queue Template PriorityQueue String": {
    "prefix": "jqueuepqstr",
    "body": [
      "Queue<String> queue = new PriorityQueue<>();",
      "$0",
    ],
    "description": "Creates a Java class with a Queue (using PriorityQueue) String."
  },

  // Java Stack template for Integer
  "Java Stack Template Integer": {
    "prefix": "jstackint",
    "body": [
      "Stack<Integer> stack = new Stack<>();",
      "$0",
    ],
    "description": "Creates a Java class with a Stack Integer."
  },
  // Java Stack template for String
  "Java Stack Template String": {
    "prefix": "jstackstr",
    "body": [
      "Stack<String> stack = new Stack<>();",
      "$0",
    ],
    "description": "Creates a Java class with a Stack String."
  },

  // Java Set template for Integer
  "Java Set Template Integer": {
    "prefix": "jsetint",
    "body": [
      "HashSet<Integer> set = new HashSet<>();",
      "$0",
    ],
    "description": "Creates a Java class with a HashSet Integer."
  },
  // Java Set template for String
  "Java Set Template String": {
    "prefix": "jsetstr",
    "body": [
      "HashSet<String> set = new HashSet<>();",
      "$0",
    ],
    "description": "Creates a Java class with a HashSet String."
  },

  // Java TreeMap template for Integer
  "Java TreeMap Template Integer": {
    "prefix": "jtreemapint",
    "body": [
      "TreeMap<Integer, Integer> map = new TreeMap<>();",
      "$0",
    ],
    "description": "Creates a Java class with a TreeMap Integer."
  },
  // Java TreeMap template for String
  "Java TreeMap Template String": {
    "prefix": "jtreemapstr",
    "body": [
      "TreeMap<String, String> map = new TreeMap<>();",
      "$0",
    ],
    "description": "Creates a Java class with a TreeMap String."
  },

  // Java PriorityQueue template for Integer
  "Java PriorityQueue Template Integer": {
    "prefix": "jpqueueint",
    "body": [
      "PriorityQueue<Integer> pq = new PriorityQueue<>();",
      "$0",
    ],
    "description": "Creates a Java class with a PriorityQueue Integer."
  },
  // Java PriorityQueue template for String
  "Java PriorityQueue Template String": {
    "prefix": "jpqueuestr",
    "body": [
      "PriorityQueue<String> pq = new PriorityQueue<>();",
      "$0",
    ],
    "description": "Creates a Java class with a PriorityQueue String."
  },

  // Java HashSet template for Integer
  "Java HashSet Template Integer": {
    "prefix": "jhashsetint",
    "body": [
      "HashSet<Integer> set = new HashSet<>();",
      "$0",
    ],
    "description": "Creates a Java class with a HashSet Integer."
  },
  // Java HashSet template for String
  "Java HashSet Template String": {
    "prefix": "jhashsetstr",
    "body": [
      "HashSet<String> set = new HashSet<>();",
      "$0",
    ],
    "description": "Creates a Java class with a HashSet String."
  },


  // Java TreeSet template for Integer
  "Java TreeSet Template Integer": {
    "prefix": "jtreesetint",
    "body": [
      "TreeSet<Integer> set = new TreeSet<>();",
      "$0",
    ],
    "description": "Creates a Java class with a TreeSet Integer."
  },
  // Java TreeSet template for String
  "Java TreeSet Template String": {
    "prefix": "jtreesetstr",
    "body": [
      "TreeSet<String> set = new TreeSet<>();",
      "$0",
    ],
    "description": "Creates a Java class with a TreeSet String."
  },
  // Java LinkedHashSet template for Integer
  "Java LinkedHashSet Template Integer": {
    "prefix": "jlinkedhashsetint",
    "body": [
      "LinkedHashSet<Integer> set = new LinkedHashSet<>();",
      "$0",
    ],
    "description": "Creates a Java class with a LinkedHashSet Integer."
  },
  // Java LinkedHashSet template for String
  "Java LinkedHashSet Template String": {
    "prefix": "jlinkedhashsetstr",
    "body": [
      "LinkedHashSet<String> set = new LinkedHashSet<>();",
      "$0",
    ],
    "description": "Creates a Java class with a LinkedHashSet String."
  },

 /*----------------------------------------------------------------------------------------------------*/
 /*----------------------------------------------------------------------------------------------------*/
 /*----------------------------------------------------------------------------------------------------*/

  // Java user Defined LinkedList
 "User Defined LinkedList": {
  "prefix": "userlinkedlist",
  "body": [
      "static class LinkedList<T> {",
      "\tprivate Node<T> head;",
      "\tprivate int size;",
      "",
      "\tprivate static class Node<T> {",
      "\t\tT data;",
      "\t\tNode<T> next;",
      "",
      "\t\tNode(T data) {",
      "\t\t\tthis.data = data;",
      "\t\t\tthis.next = null;",
      "\t\t}",
      "\t}",
      "",
      "\tpublic LinkedList() {",
      "\t\thead = null;",
      "\t\tsize = 0;",
      "\t}",
      "",
      "\tpublic void add(T element) {",
      "\t\tNode<T> newNode = new Node<>(element);",
      "\t\tif (head == null) {",
      "\t\t\thead = newNode;",
      "\t\t} else {",
      "\t\t\tNode<T> current = head;",
      "\t\t\twhile (current.next != null) {",
      "\t\t\t\tcurrent = current.next;",
      "\t\t\t}",
      "\t\t\tcurrent.next = newNode;",
      "\t\t}",
      "\t\tsize++;",
      "\t}",
      "",
      "\tpublic void print() {",
      "\t\tNode<T> current = head;",
      "\t\twhile (current != null) {",
      "\t\t\tSystem.out.print(current.data + \" \");",
      "\t\t\tcurrent = current.next;",
      "\t\t}",
      "\t\tSystem.out.println();",
      "\t}",
      "",
      "\tpublic int size() {",
      "\t\treturn size;",
      "\t}",
      "}",
      ""
  ],
  "description": "Creates a user-defined LinkedList class in Java."
},
  // Java user Defined Stack
  "User Defined Stack": {
    "prefix": "userstack",
    "body": [
        "static class Stack<T> {",
        "\tprivate Node<T> top;",
        "\tprivate int size;",
        "",
        "\tprivate static class Node<T> {",
        "\t\tT data;",
        "\t\tNode<T> next;",
        "",
        "\t\tNode(T data) {",
        "\t\t\tthis.data = data;",
        "\t\t\tthis.next = null;",
        "\t\t}",
        "\t}",
        "",
        "\tpublic Stack() {",
        "\t\ttop = null;",
        "\t\tsize = 0;",
        "\t}",
        "",
        "\tpublic void push(T element) {",
        "\t\tNode<T> newNode = new Node<>(element);",
        "\t\tnewNode.next = top;",
        "\t\ttop = newNode;",
        "\t\tsize++;",
        "\t}",
        "",
        "\tpublic T pop() {",
        "\t\tif (top == null) {",
        "\t\t\tthrow new EmptyStackException();",
        "\t\t}",
        "\t\tT data = top.data;",
        "\t\ttop = top.next;",
        "\t\tsize--;",
        "\t\treturn data;",
        "\t}",
        "",
        "\tpublic T peek() {",
        "\t\tif (top == null) {",
        "\t\t\tthrow new EmptyStackException();",
        "\t\t}",
        "\t\treturn top.data;",
        "\t}",
        "",
        "\tpublic boolean isEmpty() {",
        "\t\treturn top == null;",
        "\t}",
        "",
        "\tpublic int size() {",
        "\t\treturn size;",
        "\t}",
        "}",
        ""
    ],
    "description": "Creates a user-defined Stack class in Java."
  },
  
  // Java user Defined Queue
  "User Defined Queue": {
    "prefix": "userqueue",
    "body": [
        "static class Queue<T> {",
        "\tprivate Node<T> front;",
        "\tprivate Node<T> rear;",
        "\tprivate int size;",
        "",
        "\tprivate static class Node<T> {",
        "\t\tT data;",
        "\t\tNode<T> next;",
        "",
        "\t\tNode(T data) {",
        "\t\t\tthis.data = data;",
        "\t\t\tthis.next = null;",
        "\t\t}",
        "\t}",
        "",
        "\tpublic Queue() {",
        "\t\tfront = null;",
        "\t\trear = null;",
        "\t\tsize = 0;",
        "\t}",
        "",
        "\tpublic void offer(T element) {",
        "\t\tNode<T> newNode = new Node<>(element);",
        "\t\tif (front == null) {",
        "\t\t\tfront = newNode;",
        "\t\t\trear = newNode;",
        "\t\t} else {",
        "\t\t\trear.next = newNode;",
        "\t\t\trear = newNode;",
        "\t\t}",
        "\t\tsize++;",
        "\t}",
        "",
        "\tpublic T poll() {",
        "\t\tif (front == null) {",
        "\t\t\tthrow new NoSuchElementException();",
        "\t\t}",
        "\t\tT data = front.data;",
        "\t\tfront = front.next;",
        "\t\tsize--;",
        "\t\treturn data;",
        "\t}",
        "",
        "\tpublic T peek() {",
        "\t\tif (front == null) {",
        "\t\t\tthrow new NoSuchElementException();",
        "\t\t}",
        "\t\treturn front.data;",
        "\t}",
        "",
        "\tpublic boolean isEmpty() {",
        "\t\treturn front == null;",
        "\t}",
        "",
        "\tpublic int size() {",
        "\t\treturn size;",
        "\t}",
        "}",
        ""
    ],
    "description": "Creates a user-defined Queue class in Java."
  },
  
  // Java user Defined PriorityQueue
  "User Defined PriorityQueue": {
    "prefix": "userpriorityqueue",
    "body": [
        "static class PriorityQueue<T extends Comparable<T>> {",
        "\tprivate ArrayList<T> list;",
        "",
        "\tpublic PriorityQueue() {",
        "\t\tlist = new ArrayList<>();",
        "\t}",
        "",
        "\tpublic void offer(T element) {",
        "\t\tlist.add(element);",
        "\t\tCollections.sort(list);",
        "\t}",
        "",
        "\tpublic T poll() {",
        "\t\tif (list.isEmpty()) {",
        "\t\t\tthrow new NoSuchElementException();",
        "\t\t}",
        "\t\treturn list.remove(0);",
        "\t}",
        "",
        "\tpublic T peek() {",
        "\t\tif (list.isEmpty()) {",
        "\t\t\tthrow new NoSuchElementException();",
        "\t\t}",
        "\t\treturn list.get(0);",
        "\t}",
        "",
        "\tpublic boolean isEmpty() {",
        "\t\treturn list.isEmpty();",
        "\t}",
        "",
        "\tpublic int size() {",
        "\t\treturn list.size();",
        "\t}",
        "}",
        ""
    ],
    "description": "Creates a user-defined PriorityQueue class in Java."
  },
  
  // Java user Defined HashSet
  "User Defined HashSet": {
    "prefix": "userhashset",
    "body": [
        "static class HashSet<T> {",
        "\tprivate HashMap<T, Boolean> map;",
        "",
        "\tpublic HashSet() {",
        "\t\tmap = new HashMap<>();",
        "\t}",
        "",
        "\tpublic void add(T element) {",
        "\t\tmap.put(element, true);",
        "\t}",
        "",
        "\tpublic boolean contains(T element) {",
        "\t\treturn map.containsKey(element);",
        "\t}",
        "",
        "\tpublic void remove(T element) {",
        "\t\tmap.remove(element);",
        "\t}",
        "",
        "\tpublic boolean isEmpty() {",
        "\t\treturn map.isEmpty();",
        "\t}",
        "",
        "\tpublic int size() {",
        "\t\treturn map.size();",
        "\t}",
        "}",
        ""
    ],
    "description": "Creates a user-defined HashSet class in Java."
  },
  
  // Java user Defined TreeSet
  "User Defined TreeSet": {
    "prefix": "usertreeset",
    "body": [
        "static class TreeSet<T> {",
        "\tprivate TreeMap<T, Boolean> map;",
        "",
        "\tpublic TreeSet() {",
        "\t\tmap = new TreeMap<>();",
        "\t}",
        "",
        "\tpublic void add(T element) {",
        "\t\tmap.put(element, true);",
        "\t}",
        "",
        "\tpublic boolean contains(T element) {",
        "\t\treturn map.containsKey(element);",
        "\t}",
        "",
        "\tpublic void remove(T element) {",
        "\t\tmap.remove(element);",
        "\t}",
        "",
        "\tpublic boolean isEmpty() {",
        "\t\treturn map.isEmpty();",
        "\t}",
        "",
        "\tpublic int size() {",
        "\t\treturn map.size();",
        "\t}",
        "}",
        ""
    ],
    "description": "Creates a user-defined TreeSet class in Java."
  },
  
  // Java user Defined LinkedHashSet
  "User Defined LinkedHashSet": {
    "prefix": "userlinkedhashset",
    "body": [
        "static class LinkedHashSet<T> {",
        "\tprivate LinkedHashMap<T, Boolean> map;",
        "",
        "\tpublic LinkedHashSet() {",
        "\t\tmap = new LinkedHashMap<>();",
        "\t}",
        "",
        "\tpublic void add(T element) {",
        "\t\tmap.put(element, true);",
        "\t}",
        "",
        "\tpublic boolean contains(T element) {",
        "\t\treturn map.containsKey(element);",
        "\t}",
        "",
        "\tpublic void remove(T element) {",
        "\t\tmap.remove(element);",
        "\t}",
        "",
        "\tpublic boolean isEmpty() {",
        "\t\treturn map.isEmpty();",
        "\t}",
        "",
        "\tpublic int size() {",
        "\t\treturn map.size();",
        "\t}",
        "}",
        ""
    ],
    "description": "Creates a user-defined LinkedHashSet class in Java."
  },
  
  // Java user Defined HashMap
  "User Defined HashMap": {
    "prefix": "userhashmap",
    "body": [
        "static class HashMap<K, V> {",
        "\tprivate ArrayList<Entry<K, V>> list;",
        "",
        "\tpublic HashMap() {",
        "\t\tlist = new ArrayList<>();",
        "\t}",
        "",
        "\tpublic void put(K key, V value) {",
        "\t\tfor (Entry<K, V> entry : list) {",
        "\t\t\tif (entry.key.equals(key)) {",
        "\t\t\t\tentry.value = value;",
        "\t\t\t\treturn;",
        "\t\t\t}",
        "\t\t}",
        "\t\tlist.add(new Entry<>(key, value));",
        "\t}",
        "",
        "\tpublic V get(K key) {",
        "\t\tfor (Entry<K, V> entry : list) {",
        "\t\t\tif (entry.key.equals(key)) {",
        "\t\t\t\treturn entry.value;",
        "\t\t\t}",
        "\t\t}",
        "\t\treturn null;",
        "\t}",
        "",
        "\tpublic void remove(K key) {",
        "\t\tfor (Entry<K, V> entry : list) {",
        "\t\t\tif (entry.key.equals(key)) {",
        "\t\t\t\tlist.remove(entry);",
        "\t\t\t\treturn;",
        "\t\t\t}",
        "\t\t}",
        "\t}",
        "",
        "\tpublic boolean containsKey(K key) {",
        "\t\tfor (Entry<K, V> entry : list) {",
        "\t\t\tif (entry.key.equals(key)) {",
        "\t\t\t\treturn true;",
        "\t\t\t}",
        "\t\t}",
        "\t\treturn false;",
        "\t}",
        "",
        "\tpublic boolean isEmpty() {",
        "\t\treturn list.isEmpty();",
        "\t}",
        "",
        "\tpublic int size() {",
        "\t\treturn list.size();",
        "\t}",
        "",
        "\tprivate static class Entry<K, V> {",
        "\t\tK key;",
        "\t\tV value;",
        "",
        "\t\tEntry(K key, V value) {",
        "\t\t\tthis.key = key;",
        "\t\t\tthis.value = value;",
        "\t\t}",
        "\t}",
        "}",
        ""
    ],
    "description": "Creates a user-defined HashMap class in Java."
  },
  
  // Java user Defined TreeMap
  "User Defined TreeMap": {
    "prefix": "usertreemap",
    "body": [
        "static class TreeMap<K, V> {",
        "\tprivate ArrayList<Entry<K, V>> list;",
        "",
        "\tpublic TreeMap() {",
        "\t\tlist = new ArrayList<>();",
        "\t}",
        "",
        "\tpublic void put(K key, V value) {",
        "\t\tfor (Entry<K, V> entry : list) {",
        "\t\t\tif (entry.key.equals(key)) {",
        "\t\t\t\tentry.value = value;",
        "\t\t\t\treturn;",
        "\t\t\t}",
        "\t\t}",
        "\t\tlist.add(new Entry<>(key, value));",
        "\t\tCollections.sort(list);",
        "\t}",
        "",
        "\tpublic V get(K key) {",
        "\t\tfor (Entry<K, V> entry : list) {",
        "\t\t\tif (entry.key.equals(key)) {",
        "\t\t\t\treturn entry.value;",
        "\t\t\t}",
        "\t\t}",
        "\t\treturn null;",
        "\t}",
        "",
        "\tpublic void remove(K key) {",
        "\t\tfor (Entry<K, V> entry : list) {",
        "\t\t\tif (entry.key.equals(key)) {",
        "\t\t\t\tlist.remove(entry);",
        "\t\t\t\treturn;",
        "\t\t\t}",
        "\t\t}",
        "\t}",
        "",
        "\tpublic boolean containsKey(K key) {",
        "\t\tfor (Entry<K, V> entry : list) {",
        "\t\t\tif (entry.key.equals(key)) {",
        "\t\t\t\treturn true;",
        "\t\t\t}",
        "\t\t}",
        "\t\treturn false;",
        "\t}",
        "",
        "\tpublic boolean isEmpty() {",
        "\t\treturn list.isEmpty();",
        "\t}",
        "",
        "\tpublic int size() {",
        "\t\treturn list.size();",
        "\t}",
        "",
        "\tprivate static class Entry<K, V> implements Comparable<Entry<K, V>> {",
        "\t\tK key;",
        "\t\tV value;",
        "",
        "\t\tEntry(K key, V value) {",
        "\t\t\tthis.key = key;",
        "\t\t\tthis.value = value;",
        "\t\t}",
        "",
        "\t\tpublic int compareTo(Entry<K, V> other) {",
        "\t\t\treturn this.key.toString().compareTo(other.key.toString());",
        "\t\t}",
        "\t}",
        "}",
        ""
    ],
    "description": "Creates a user-defined TreeMap class in Java."
  },
  
  // Java user Defined ArrayList class
  "User Defined ArrayList": {
    "prefix": "userarraylist",
    "body": [
        "static class ArrayList<T> {",
        "\tprivate T[] array;",
        "\tprivate int size;",
        "",
        "\t@SuppressWarnings(\"unchecked\")",
        "\tpublic ArrayList() {",
        "\t\tarray = (T[]) new Object[10];",
        "\t\tsize = 0;",
        "\t}",
        "",
        "\tpublic void add(T element) {",
        "\t\tif (size == array.length) {",
        "",
        "\t\t\t@SuppressWarnings(\"unchecked\")",
        "\t\t\tT[] newArray = (T[]) new Object[size * 2];",
        "\t\t\tSystem.arraycopy(array, 0, newArray, 0, size);",
        "\t\t\tarray = newArray;",
        "\t\t}",
        "\t\tarray[size++] = element;",
        "\t}",
        "",
        "\tpublic T get(int index) {",
        "\t\tif (index < 0 || index >= size) {",
        "\t\t\tthrow new IndexOutOfBoundsException();",
        "\t\t}",
        "\t\treturn array[index];",
        "\t}",
        "",
        "\tpublic int size() {",
        "\t\treturn size;",
        "\t}",
        "}",
        ""
    ],
    "description": "Creates a user-defined ArrayList class in Java."
  },
  
  // Java user Defined Array class
  "User Defined Array": {
    "prefix": "userarray",
    "body": [
        "static class Array<T> {",
        "\tprivate T[] array;",
        "\tprivate int size;",
        "",
        "\t@SuppressWarnings(\"unchecked\")",
        "\tpublic Array(int capacity) {",
        "\t\tarray = (T[]) new Object[capacity];",
        "\t\tsize = 0;",
        "\t}",
        "",
        "\tpublic void add(T element) {",
        "\t\tif (size == array.length) {",
        "",
        "\t\t\t@SuppressWarnings(\"unchecked\")",
        "\t\t\tT[] newArray = (T[]) new Object[size * 2];",
        "\t\t\tSystem.arraycopy(array, 0, newArray, 0, size);",
        "\t\t\tarray = newArray;",
        "\t\t}",
        "\t\tarray[size++] = element;",
        "\t}",
        "",
        "\tpublic T get(int index) {",
        "\t\tif (index < 0 || index >= size) {",
        "\t\t\tthrow new IndexOutOfBoundsException();",
        "\t\t}",
        "\t\treturn array[index];",
        "\t}",
        "",
        "\tpublic int size() {",
        "\t\treturn size;",
        "\t}",
        "}",
        ""
    ],
    "description": "Creates a user-defined Array class in Java."
  },
  
  // Java user Defined DoublyLinkedList
  "User Defined DoublyLinkedList": {
    "prefix": "userdoublylinkedlist",
    "body": [
        "static class DoublyLinkedList<T> {",
        "\tprivate Node<T> head;",
        "\tprivate Node<T> tail;",
        "\tprivate int size;",
        "",
        "\tprivate static class Node<T> {",
        "\t\tT data;",
        "\t\tNode<T> prev;",
        "\t\tNode<T> next;",
        "",
        "\t\tNode(T data) {",
        "\t\t\tthis.data = data;",
        "\t\t\tthis.prev = null;",
        "\t\t\tthis.next = null;",
        "\t\t}",
        "\t}",
        "",
        "\tpublic DoublyLinkedList() {",
        "\t\thead = null;",
        "\t\ttail = null;",
        "\t\tsize = 0;",
        "\t}",
        "",
        "\tpublic void addFirst(T element) {",
        "\t\tNode<T> newNode = new Node<>(element);",
        "\t\tif (head == null) {",
        "\t\t\thead = newNode;",
        "\t\t\ttail = newNode;",
        "\t\t} else {",
        "\t\t\tnewNode.next = head;",
        "\t\t\thead.prev = newNode;",
        "\t\t\thead = newNode;",
        "\t\t}",
        "\t\tsize++;",
        "\t}",
        "",
        "\tpublic void addLast(T element) {",
        "\t\tNode<T> newNode = new Node<>(element);",
        "\t\tif (tail == null) {",
        "\t\t\thead = newNode;",
        "\t\t\ttail = newNode;",
        "\t\t} else {",
        "\t\t\tnewNode.prev = tail;",
        "\t\t\ttail.next = newNode;",
        "\t\t\ttail = newNode;",
        "\t\t}",
        "\t\tsize++;",
        "\t}",
        "",
        "\tpublic void print() {",
        "\t\tNode<T> current = head;",
        "\t\twhile (current != null) {",
        "\t\t\tSystem.out.print(current.data + \" \");",
        "\t\t\tcurrent = current.next;",
        "\t\t}",
        "\t\tSystem.out.println();",
        "\t}",
        "",
        "\tpublic int size() {",
        "\t\treturn size;",
        "\t}",
        "}",
        ""
    ],
    "description": "Creates a user-defined DoublyLinkedList class in Java."
  },
  // Java user Defined CircularLinkedList
  "User Defined CircularLinkedList": {
    "prefix": "usercircularlinkedlist",
    "body": [
        "static class CircularLinkedList<T> {",
        "\tprivate Node<T> head;",
        "\tprivate Node<T> tail;",
        "\tprivate int size;",
        "",
        "\tprivate static class Node<T> {",
        "\t\tT data;",
        "\t\tNode<T> next;",
        "",
        "\t\tNode(T data) {",
        "\t\t\tthis.data = data;",
        "\t\t\tthis.next = null;",
        "\t\t}",
        "\t}",
        "",
        "\tpublic CircularLinkedList() {",
        "\t\thead = null;",
        "\t\ttail = null;",
        "\t\tsize = 0;",
        "\t}",
        "",
        "\tpublic void add(T element) {",
        "\t\tNode<T> newNode = new Node<>(element);",
        "\t\tif (head == null) {",
        "\t\t\thead = newNode;",
        "\t\t\ttail = newNode;",
        "\t\t\ttail.next = head;",
        "\t\t} else {",
        "\t\t\ttail.next = newNode;",
        "\t\t\ttail = newNode;",
        "\t\t\ttail.next = head;",
        "\t\t}",
        "\t\tsize++;",
        "\t}",
        "",
        "\tpublic void print() {",
        "\t\tNode<T> current = head;",
        "\t\tfor (int i = 0; i < size; i++) {",
        "\t\t\tSystem.out.print(current.data + \" \");",
        "\t\t\tcurrent = current.next;",
        "\t\t}",
        "\t\tSystem.out.println();",
        "\t}",
        "",
        "\tpublic int size() {",
        "\t\treturn size;",
        "\t}",
        "}",
        ""
    ],
    "description": "Creates a user-defined CircularLinkedList class in Java."
  },

  /*----------------------------------------------------------------------------------------------------*/
  /*----------------------------------------------------------------------------------------------------*/
  /*----------------------------------------------------------------------------------------------------*/

  // Java try-with-resources template
  "Java try-with-resources": {
    "prefix": "trywithresources",
    "body": [
      "try (Scanner scanner = new Scanner(System.in)) {",
      "\t$0",
      "} catch (Exception e) {",
      "\tSystem.out.println(e.getMessage());",
      "}",
    ],
    "description": "Creates a try-with-resources block in Java."
  },
  // Java try-catch block template
  "Java try-catch block": {
    "prefix": "trycatch",
    "body": [
      "try {",
      "\t$0",
      "} catch (Exception e) {",
      "\tSystem.out.println(e.getMessage());",
      "}",
    ],
    "description": "Creates a try-catch block in Java."
  },
  // Java try-catch-finally block template
  "Java try-catch-finally block": {
    "prefix": "trycatchfinally",
    "body": [
      "try {",
      "\t$0",
      "} catch (Exception e) {",
      "\tSystem.out.println(e.getMessage());",
      "} finally {",
      "\tSystem.out.println(\"Finally block\");",
      "}",
    ],
    "description": "Creates a try-catch-finally block in Java."
  },
  // Java if-else statement template
  "Java if-else statement": {
    "prefix": "ifelse",
    "body": [
      "if ($1) {",
      "\t$0",
      "} else {",
      "\t",
      "}",
    ],
    "description": "Creates an if-else statement in Java."
  },
  // Java if-else-if statement template
  "Java if-else-if statement": {
    "prefix": "ifelseif",
    "body": [
      "if ($1) {",
      "\t$0",
      "} else if ($2) {",
      "\t",
      "} else {",
      "\t",
      "}",
    ],
    "description": "Creates an if-else-if statement in Java."
  },
  // Java switch statement template
  "Java switch statement": {
    "prefix": "switch",
    "body": [
      "switch ($1) {",
      "\tcase $2:",
      "\t\t$0",
      "\t\tbreak;",
      "\tdefault:",
      "\t\tbreak;",
      "}",
    ],
    "description": "Creates a switch statement in Java."
  },
  // Java for loop template
  "Java for loop": {
    "prefix": "for",
    "body": [
      "for (int i = 0; i < $1; i++) {",
      "\t$0",
      "}",
    ],
    "description": "Creates a for loop in Java."
  },
  // Java for-each loop template
  "Java for-each loop": {
    "prefix": "foreach",
    "body": [
      "for ($1 : $2) {",
      "\t$0",
      "}",
    ],
    "description": "Creates a for-each loop in Java."
  },
  // Java while loop template
  "Java while loop": {
    "prefix": "while",
    "body": [
      "while ($1) {",
      "\t$0",
      "}",
    ],
    "description": "Creates a while loop in Java."
  },
  // Java do-while loop template
  "Java do-while loop": {
    "prefix": "dowhile",
    "body": [
      "do {",
      "\t$0",
      "} while ($1);",
    ],
    "description": "Creates a do-while loop in Java."
  }
}